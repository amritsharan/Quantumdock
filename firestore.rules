/**
 * @fileoverview Firestore Security Rules for QuantumDock application.
 *
 * Core Philosophy:
 * This ruleset provides basic read and write access to all authenticated users for molecule,
 * target protein, and docking result data. It assumes no specific ownership or roles are defined.
 *
 * Data Structure:
 * - /molecules/{moleculeId}: Stores molecule data.
 * - /target_proteins/{targetProteinId}: Stores target protein data.
 * - /docking_results/{dockingResultId}: Stores docking result data.
 *
 * Key Security Decisions:
 * - No ownership or role-based access control is enforced.
 * - All authenticated users can read and write data in all collections.
 * - Listing of all collections is allowed for all authenticated users.
 *
 * Future Considerations:
 * - If user-specific data ownership is introduced, the schema must be updated
 *   to include a userId field on each entity. This will allow for the implementation
 *   of owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read and write access to all authenticated users for molecules.
     * @path /molecules/{moleculeId}
     * @allow (get, list) User is authenticated.
     * @allow (create, update, delete) User is authenticated.
     * @deny (create, update, delete) User is not authenticated.
     * @principle Allows all authenticated users to manage molecule data.
     */
    match /molecules/{moleculeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read and write access to all authenticated users for target proteins.
     * @path /target_proteins/{targetProteinId}
     * @allow (get, list) User is authenticated.
     * @allow (create, update, delete) User is authenticated.
     * @deny (create, update, delete) User is not authenticated.
     * @principle Allows all authenticated users to manage target protein data.
     */
    match /target_proteins/{targetProteinId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read and write access to all authenticated users for docking results.
     * @path /docking_results/{dockingResultId}
     * @allow (get, list) User is authenticated.
     * @allow (create, update, delete) User is authenticated.
     * @deny (create, update, delete) User is not authenticated.
     * @principle Allows all authenticated users to manage docking result data.
     */
    match /docking_results/{dockingResultId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}