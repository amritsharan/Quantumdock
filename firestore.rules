/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a strict user-ownership model for user profiles,
 * ensuring that only the authenticated user can read and write their own profile data.
 * Login history is publicly readable but only writeable by a server-side process.
 *
 * @Data Structure
 * - /users/{userId}: Stores user profile data. Access is restricted to the user identified by {userId}.
 * - /login_history/{historyId}: Stores login events. Publicly readable, writeable only by a trusted source (e.g., backend).
 *
 * @Key Security Decisions
 * - User profiles are private; listing all users is disallowed.
 * - Login history is publicly listable and gettable but only writeable by an admin.
 *
 * @Denormalization for Authorization
 *   N/A - The data model inherently supports ownership-based security via the {userId} path segment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'A' can read, update, or delete their own profile.
     *     - auth.uid: 'A'
     *     - userId: 'A'
     * @allow (create) User 'A' can create their profile if their auth UID matches the document ID.
     *     - auth.uid: 'A'
     *     - userId: 'A'
     * @deny (get, update, delete) User 'B' cannot read, update, or delete User 'A's profile.
     *     - auth.uid: 'B'
     *     - userId: 'A'
     * @deny (create) User 'A' cannot create a profile with an ID that doesn't match their auth UID.
     *     - auth.uid: 'A'
     *     - userId: 'B'
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the document, and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId; // Only the user can create their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Only the owner can update, and userId cannot be changed.
      allow delete: if isExistingOwner(userId); // Only the owner can delete.
    }

    /**
     * @description Allows public read access to login history while restricting write access.
     * @path /login_history/{historyId}
     * @allow (get, list) Any user can read login history entries.
     * @allow (create) No one from the client-side can create login history entries.
     * @allow (update, delete) No one from the client-side can update or delete login history entries.
     * @deny (create, update, delete) All client-side writes are denied.
     * @principle Enforces public read access with restricted write access.
     */
    match /login_history/{historyId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}