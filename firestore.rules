/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection. It enforces ownership for user profiles
 * and allows public read access to login history data, while restricting modifications
 * to authorized users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user
 *   themselves.
 * - /login_history/{historyId}: Stores login history events. Publicly readable, but
 *   create-only by the application.
 *
 * Key Security Decisions:
 * - User profiles are private and accessible only to the owning user. Listing of users is denied.
 * - Login history is publicly readable for monitoring purposes.
 *
 * Denormalization for Authorization:
 * - The LoginHistory document contains the userId, which allows read access to be checked using the isOwner function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId of the existing document.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /***** User Profile Rules *****/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @allow (create) User with UID 'user123' can create their profile at /users/user123 if it doesn't exist.
     * @deny (get, update, delete) User with UID 'user456' cannot access or modify the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Read permissions: only the owner can get their profile
      allow get: if isOwner(userId);
      // List is forbidden
      allow list: if false;

      // Write permissions:
      // - create: allowed only if the user is creating their own profile
      allow create: if isOwner(userId);
      // - update: allowed only if the user is updating their own profile, and the userId is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // - delete: allowed only if the user is deleting their own profile
      allow delete: if isExistingOwner(userId);
    }

    /***** Login History Rules *****/

    /**
     * @description Controls access to login history documents.
     * @path /login_history/{historyId}
     * @allow (get, list) Any user can read login history.
     * @deny (create, update, delete) No user can create, update, or delete login history directly.
     * @principle Allows public read access to login history but restricts modifications to authorized users only.
     */
    match /login_history/{historyId} {
      // Read permissions: public read access
      allow get, list: if true;

      // Write permissions: no direct creation, updates, or deletes by users.
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}