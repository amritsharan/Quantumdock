/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows only authenticated access to login history, with no write access.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, with each document ID
 *   matching the user's UID.
 * - Login history entries are stored in the `/login_history/{historyId}` collection.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - No public listing of users is allowed.
 * - Login history is read-only, intended for internal auditing, and accessible
 *   only to authenticated users.
 *
 * Denormalization for Authorization:
 * - The `/users/{userId}` document ID is used as the ownership identifier.
 *   This avoids the need for an `ownerId` field within the document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their own profile if authenticated as 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can read, update, or delete their own profile if authenticated as 'user_abc'.
     * @deny (create) - User 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (update, delete) - User 'user_xyz' cannot update or delete the profile for 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the login_history collection.
     * @path /login_history/{historyId}
     * @allow (get, list) - Any authenticated user can read login history.
     * @deny (create, update, delete) - No user can create, update, or delete login history entries.
     * @principle Restricts write access to login history for auditing purposes.
     */
    match /login_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}