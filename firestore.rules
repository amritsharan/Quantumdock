/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to read and write their own profile data. Login history
 * is publicly writeable to allow tracking login events, but is not listable
 * to prevent unauthorized access to login records.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the
 *   user with the matching UID.
 * - /login_history/{historyId}: Stores login history entries. Any authenticated
 *   user can create a login history entry.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned and controlled by the individual user.
 * - Login history is append-only and not listable.
 * - The ruleset prioritizes security and simplicity. Schema validation beyond
 *   authorization is not performed in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The `LoginHistory` schema includes a `userId` field, which is validated
 *   against `request.auth.uid` in the security rules to ensure the login
 *   event is recorded for the correct user. This avoids the need for complex
 *   lookups.
 *
 * Structural Segregation:
 * - User profiles and login history are stored in separate collections with
 *   different access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can read and modify their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @deny (get, update, delete) User attempts to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.firstName is string && request.resource.data.lastName is string;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to login history documents.
     * @path /login_history/{historyId}
     * @allow (create) Any authenticated user can create a login history entry.
     * @deny (get, list, update, delete) No one can read, list, update, or delete login history entries.
     * @principle Allows public writes but restricts reads.
     */
    match /login_history/{historyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.email is string;
      allow update: if false;
      allow delete: if false;
    }
  }
}