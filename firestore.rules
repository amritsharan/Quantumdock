/**
 * @fileoverview Firestore Security Rules for QuantumDock application.
 *
 * Core Philosophy:
 * This ruleset provides basic protection against unauthenticated access to the database.
 * It does not implement strong access control beyond requiring users to be signed in.
 * This is suitable for prototyping but should be hardened before production use.
 *
 * Data Structure:
 * The database consists of four top-level collections:
 * - /molecules/{moleculeId}: Stores molecule data.
 * - /target_proteins/{targetProteinId}: Stores target protein data.
 * - /docking_results/{dockingResultId}: Stores docking result data.
 * - /loginHistory/{loginEventId}: Stores user login events.
 *
 * Key Security Decisions:
 * - All read and write access requires authentication.
 * - No user listing is allowed to protect user privacy.
 * - Data validation is minimal, focusing on relational integrity where required for authorization.
 * - Public read access is NOT enabled for any collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /molecules/{moleculeId} collection.
     * @path /databases/{database}/documents/molecules/{moleculeId}
     * @allow (get, list) An authenticated user can read molecule data.
     * @allow (create, update, delete) An authenticated user can modify molecule data.
     * @deny (get, list) An unauthenticated user cannot read molecule data.
     * @deny (create, update, delete) An unauthenticated user cannot modify molecule data.
     * @principle Requires authentication for all access.
     */
    match /molecules/{moleculeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the /target_proteins/{targetProteinId} collection.
     * @path /databases/{database}/documents/target_proteins/{targetProteinId}
     * @allow (get, list) An authenticated user can read target protein data.
     * @allow (create, update, delete) An authenticated user can modify target protein data.
     * @deny (get, list) An unauthenticated user cannot read target protein data.
     * @deny (create, update, delete) An unauthenticated user cannot modify target protein data.
     * @principle Requires authentication for all access.
     */
    match /target_proteins/{targetProteinId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the /docking_results/{dockingResultId} collection.
     * @path /databases/{database}/documents/docking_results/{dockingResultId}
     * @allow (get, list) An authenticated user can read docking result data.
     * @allow (create, update, delete) An authenticated user can modify docking result data.
     * @deny (get, list) An unauthenticated user cannot read docking result data.
     * @deny (create, update, delete) An unauthenticated user cannot modify docking result data.
     * @principle Requires authentication for all access.
     */
    match /docking_results/{dockingResultId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
    /**
     * @description Controls access to the /loginHistory/{loginEventId} collection.
     * @path /databases/{database}/documents/loginHistory/{loginEventId}
     * @allow (get, list) An authenticated user can read login history data.
     * @allow (create, update, delete) An authenticated user can modify login history data.
     * @deny (get, list) An unauthenticated user cannot read login history data.
     * @deny (create, update, delete) An unauthenticated user cannot modify login history data.
     * @principle Requires authentication for all access.
     */
    match /loginHistory/{loginEventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // Helper function to determine if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}