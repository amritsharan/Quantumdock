/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership for data privacy while allowing flexible data shapes for rapid prototyping.
 * It enforces that only the authenticated user can read or write their own profile data. Login history is publicly readable but only writeable by the server.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /login_history/{historyId}: Stores login history events. Publicly readable, writeable only by the backend.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Data validation is minimized to allow for schema flexibility during prototyping. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 *  N/A - In this configuration, user IDs are already present in both the user profiles and login history, precluding the need for more authorization data.
 *
 * Structural Segregation:
 * N/A - There isn't a need to segregate data between private and public in this config.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access profile data at /users/user_abc.
     * @principle Enforces document ownership; users can only manage their own profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores login history events. Publicly readable, writeable only by the backend.
     * @path /login_history/{historyId}
     * @allow (get, list) - Any user can read login history entries.
     * @deny (create, update, delete) - Regular users cannot create, update, or delete login history entries.
     * @principle Allows public read access for audit logs but restricts write access to the backend.
     */
    match /login_history/{historyId} {
      allow get, list: if true;
      allow create: if request.auth.token.email == 'example@example.com';
      allow update: if false;
      allow delete: if false;
    }
  }
}