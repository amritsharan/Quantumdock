/**
 * @fileoverview Firestore Security Rules for QuantumDock application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only
 * access their own data, and no data is shared between users unless explicitly defined
 * through a shared access pattern (not present in this version).
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which enforces a clear ownership boundary.
 * - /users/{userId}: User profile data.
 * - /users/{userId}/molecules/{moleculeId}: Molecules owned by the user.
 * - /users/{userId}/proteinTargets/{proteinTargetId}: Protein targets owned by the user.
 * - /users/{userId}/dockingSimulations/{dockingSimulationId}: Docking simulations owned by the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID, and the resource exists
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the ID of the new resource matches the document ID.
     */
    // function isValidUserId() {
    //     return request.resource.data.id == request.auth.uid;
    // }


    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creating their own profile.
     * @deny (create) Signed-in user creating a profile for another user.
     * @allow (get) Signed-in user reading their own profile.
     * @deny (get) Any user reading another user's profile.
     * @allow (update) Signed-in user updating their own profile.
     * @deny (update) Any user updating another user's profile.
     * @allow (delete) Signed-in user deleting their own profile.
     * @deny (delete) Any user deleting another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rule for molecules under a user's profile.
     * @path /users/{userId}/molecules/{moleculeId}
     * @allow (create) Signed-in user creating a molecule under their profile.
     * @deny (create) Signed-in user creating a molecule under another user's profile.
     * @allow (get) Signed-in user reading a molecule under their profile.
     * @deny (get) Any user reading a molecule under another user's profile.
     * @allow (update) Signed-in user updating a molecule under their profile.
     * @deny (update) Any user updating a molecule under another user's profile.
     * @allow (delete) Signed-in user deleting a molecule under their profile.
     * @deny (delete) Any user deleting a molecule under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/molecules/{moleculeId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
    
    /**
     * @description Rule for login history under a user's profile.
     * @path /users/{userId}/loginHistory/{historyId}
     * @allow (create, list) Signed-in user can create and view their own login history.
     * @allow (update) Signed-in user can update their own login history (e.g., to set logout time).
     * @principle Enforces strict ownership for login history data.
     */
    match /users/{userId}/loginHistory/{historyId} {
        allow create, list, update: if isOwner(userId);
        allow get, delete: if false;
    }

    /**
     * @description Rule for protein targets under a user's profile.
     * @path /users/{userId}/proteinTargets/{proteinTargetId}
     * @allow (create) Signed-in user creating a protein target under their profile.
     * @deny (create) Signed-in user creating a protein target under another user's profile.
     * @allow (get) Signed-in user reading a protein target under their profile.
     * @deny (get) Any user reading a protein target under another user's profile.
     * @allow (update) Signed-in user updating a protein target under their profile.
     * @deny (update) Any user updating a protein target under another user's profile.
     * @allow (delete) Signed-in user deleting a protein target under their profile.
     * @deny (delete) Any user deleting a protein target under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/proteinTargets/{proteinTargetId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for docking simulations under a user's profile.
     * @path /users/{userId}/dockingSimulations/{dockingSimulationId}
     * @allow (create) Signed-in user creating a docking simulation under their profile.
     * @deny (create) Signed-in user creating a docking simulation under another user's profile.
     * @allow (get) Signed-in user reading a docking simulation under their profile.
     * @deny (get) Any user reading a docking simulation under another user's profile.
     * @allow (update) Signed-in user updating a docking simulation under their profile.
     * @deny (update) Any user updating a docking simulation under another user's profile.
     * @allow (delete) Signed-in user deleting a docking simulation under their profile.
     * @deny (delete) Any user deleting a docking simulation under another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dockingSimulations/{dockingSimulationId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}
