/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and their login history,
 * while granting public read access to molecules, target proteins, and docking results.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /users/{userId}/loginHistory/{loginEventId}: Stores login events for a specific user. Only the user can read/write their own login history.
 * - /molecules/{moleculeId}: Stores molecule data. Public read access, owner-only writes (if an owner field exists).
 * - /target_proteins/{targetProteinId}: Stores target protein data. Public read access, owner-only writes (if an owner field exists).
 * - /docking_results/{dockingResultId}: Stores docking result data. Public read access, owner-only writes (if an owner field exists).
 *
 * Key Security Decisions:
 * - Users can only access their own profile and login history.
 * - Listing of all users is disallowed.
 * - Molecules, target proteins, and docking results are publicly readable.  Write access to these collections is only allowed if the object contains an ownership field.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under /users/{userId} to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile.
     * @allow (create) User can create their own profile.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Enforces user-ownership for login history.
       * @path /users/{userId}/loginHistory/{loginEventId}
       * @allow (get, list, create, update, delete) User with matching UID can access their own login history.
       * @deny (get, list, create, update, delete) User cannot access another user's login history.
       * @principle Restricts access to a user's own data tree.
       */
      match /loginHistory/{loginEventId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }

    /**
     * @description Allows public read access to molecules.  Write access requires an ownership field.
     * @path /molecules/{moleculeId}
     * @allow (get, list) Any authenticated user can read molecule data.
     * @deny (create, update, delete)  Writes are not currently permitted without an ownership field.
     * @principle Allows public reads with restricted writes.
     */
    match /molecules/{moleculeId} {
      allow get, list: if true;
      allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Allows public read access to target proteins. Write access requires an ownership field.
     * @path /target_proteins/{targetProteinId}
     * @allow (get, list) Any authenticated user can read target protein data.
     * @deny (create, update, delete) Writes are not currently permitted without an ownership field.
     * @principle Allows public reads with restricted writes.
     */
    match /target_proteins/{targetProteinId} {
      allow get, list: if true;
      allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Allows public read access to docking results. Write access requires an ownership field.
     * @path /docking_results/{dockingResultId}
     * @allow (get, list) Any authenticated user can read docking result data.
     * @deny (create, update, delete) Writes are not currently permitted without an ownership field.
     * @principle Allows public reads with restricted writes.
     */
    match /docking_results/{dockingResultId} {
      allow get, list: if true;
      allow create: if request.auth != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
  }
}