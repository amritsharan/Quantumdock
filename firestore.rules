/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, focusing on user-based access control where applicable.
 * It denormalizes authorization data onto documents to minimize reads and improve performance.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Access is restricted to the owning user.
 * - /login_history/{historyId}: Stores login history entries. Only authenticated users can create entries; listing is disallowed for security reasons.
 *
 * Key Security Decisions:
 * - User listing is disabled for enhanced privacy.
 * - The login_history collection allows authenticated users to create login entries, but prevents listing to avoid exposing potentially sensitive data.
 *
 * Denormalization for Authorization:
 *   - Login History: The `login_history` entries are stored with the `userId` field directly on the document, allowing us to avoid needing to look up the user separately when creating a login history entry.
 *
 * Structural Segregation:
 *   - Not applicable in this case, as there is no clear separation of public and private data within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - If the user is the owner of the profile.
     * @deny (get, create, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the request is made by an existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      
      // Allow read access (get and list) only to the owner.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow creating a user document if the UID matches the document ID.
      allow create: if isOwner(userId) && request.resource.data.email is string;

      // Allow updates if the user is the owner and the email has not changed.
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;

      // Allow deletes if the user is the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to login history entries.
     * @path /login_history/{historyId}
     * @allow (create) - Any authenticated user can create a login history entry.
     * @deny (get, list, update, delete) - All other operations are denied.
     * @principle Allows authenticated users to create login history entries, but restricts all other access for security.
     */
    match /login_history/{historyId} {
        // Allow any authenticated user to create a login history entry.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.email is string;

        // Deny all other operations.
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }

    // isSignedin Function
    function isSignedIn() {
        return request.auth != null;
    }
  }
}