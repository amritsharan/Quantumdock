/**
 * @fileoverview Firestore Security Rules for QuantumDock application.
 *
 * Core Philosophy:
 * This ruleset provides basic read/write access to the data entities
 * (Molecule, TargetProtein, DockingResult). The LoginEvent collection is locked down for all
 * client 'list' operations to fix a bug. The ruleset does not currently implement any strong authorization.
 *
 * Data Structure:
 * The database consists of top-level collections for 'molecules', 'target_proteins', 'docking_results',
 * and 'loginHistory'.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied on `/loginHistory` to fix a permission issue reported by NextJS.
 * - No ownership or role-based access control is implemented at this stage beyond requiring users to be signed in to use the app.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Grants read/write access to molecules for authenticated users.
     * @path /molecules/{moleculeId}
     * @allow (get) Signed-in user can read any molecule.
     * @allow (create) Signed-in user can create a molecule.
     * @deny (create) Anonymous user cannot create a molecule.
     * @principle Authenticated users can create and read molecules.
     */
    match /molecules/{moleculeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read/write access to target proteins for authenticated users.
     * @path /target_proteins/{targetProteinId}
     * @allow (get) Signed-in user can read any target protein.
     * @allow (create) Signed-in user can create a target protein.
     * @deny (create) Anonymous user cannot create a target protein.
     * @principle Authenticated users can create and read target proteins.
     */
    match /target_proteins/{targetProteinId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read/write access to docking results for authenticated users.
     * @path /docking_results/{dockingResultId}
     * @allow (get) Signed-in user can read any docking result.
     * @allow (create) Signed-in user can create a docking result.
     * @deny (create) Anonymous user cannot create a docking result.
     * @principle Authenticated users can create and read docking results.
     */
    match /docking_results/{dockingResultId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts listing login history.
     * @path /loginHistory/{loginEventId}
     * @deny (list) Any user cannot list login history.
     * @principle Prevents unauthorized listing of login history.
     */
    match /loginHistory/{loginEventId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}