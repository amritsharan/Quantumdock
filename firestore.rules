/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows anyone to write to the LoginHistory collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the user themselves.
 * - /login_history/{historyId}: Stores user login events. Create is allowed with userId same as auth.uid
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Login history is append-only (create only) and is linked to the user who logged in.
 *
 * Denormalization for Authorization:
 * - LoginHistory documents must contain the userId so the rules can authorize write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access their own profile.
     * @allow (create) User can create their own profile if the userId matches their auth.uid.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to create a new login history entry, but restricts modification or deletion.
     * @path /login_history/{historyId}
     * @allow (create) Any authenticated user can create a login history entry with userId field is same as auth.uid.
     * @deny (get, list, update, delete) No one can read, list, update, or delete login history entries.
     * @principle Allows public create, but restricts all other access.
     */
    match /login_history/{historyId} {
       function isSignedIn() {
          return request.auth != null;
        }
       allow get: if false;
       allow list: if false;
       allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       allow update: if false;
       allow delete: if false;
    }
  }
}