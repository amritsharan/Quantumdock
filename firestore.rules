/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows public read access to molecules, target proteins, and docking results.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /molecules/{moleculeId}: Stores molecule data, publicly readable and writable by any authenticated user.
 * - /target_proteins/{targetProteinId}: Stores target protein data, publicly readable and writable by any authenticated user.
 * - /docking_results/{dockingResultId}: Stores docking result data, publicly readable and writable by any authenticated user.
 *
 * Key Security Decisions:
 * - User profiles are strictly controlled: only the authenticated user can read, update, or delete their own profile.
 * - Listing of users is disallowed.
 * - Molecules, target proteins, and docking results are publicly readable and writable by authenticated users.
 *
 * Denormalization for Authorization:
 * - User profiles are stored under `/users/{userId}`, allowing for simple ownership checks using the `userId` path segment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the authenticated user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to molecule data. Any authenticated user can read, create, update, or delete molecule data.
     * @path /molecules/{moleculeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn()
     * @principle Grants public read access with authentication required for writes.
     */
    match /molecules/{moleculeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to target protein data. Any authenticated user can read, create, update, or delete target protein data.
     * @path /target_proteins/{targetProteinId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn()
     * @principle Grants public read access with authentication required for writes.
     */
    match /target_proteins/{targetProteinId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to docking result data. Any authenticated user can read, create, update, or delete docking result data.
     * @path /docking_results/{dockingResultId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isSignedIn()
     * @principle Grants public read access with authentication required for writes.
     */
    match /docking_results/{dockingResultId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}