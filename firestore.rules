/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user authentication.
 * Data shape validation is relaxed to enable rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /login_history/{historyId}: Stores login history events.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Login history is only listable by authenticated users.
 *
 * Denormalization for Authorization: N/A.  No denormalization is being used.
 * Structural Segregation: N/A. No structural segregation is being used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @deny (create) If the userId does not match the authenticated user's UID.
     * @allow (get) Authenticated user can read their profile.
     * @deny (get) Non-authenticated user cannot read any user profile.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID and the document exists.
     * @deny (update) If the userId does not match the authenticated user's UID or the document does not exist.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID and the document exists.
     * @deny (delete) If the userId does not match the authenticated user's UID or the document does not exist.
     * @allow (list) Listing all users is disallowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Defines the security rules for the /login_history/{historyId} collection.
     * @path /login_history/{historyId}
     * @allow (create) Authenticated user can create a login history entry.
     * @deny (create) Non-authenticated user cannot create a login history entry.
     * @allow (get) Authenticated user can read a login history entry.
     * @deny (get) Non-authenticated user cannot read any login history entry.
     * @allow (update) Authenticated user can update a login history entry if it exists.
     * @deny (update) Non-authenticated user cannot update any login history entry or if the document doesn't exist.
     * @allow (delete) Authenticated user can delete a login history entry if it exists.
     * @deny (delete) Non-authenticated user cannot delete any login history entry or if the document doesn't exist.
     * @allow (list) Authenticated user can list login history entries.
     * @deny (list) Non-authenticated user cannot list login history entries.
     * @principle Enforces authentication for all operations.
     */
    match /login_history/{historyId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
      allow list: if isSignedIn();
    }
  }
}